using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpg_query"], :libpg_query),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/RelationalAI-oss/libpg_query_binary_builder/releases/download/0.0.4"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libpg_query.v0.0.4.i686-linux-gnu.tar.gz", "7f2cbc1187701d905ce341eab5c2ddef133e250b76dc8078ba8f440ff15d2b0a"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libpg_query.v0.0.4.i686-linux-musl.tar.gz", "2e8a1783628da333be042f9594797303ff7d0525403771e0f7932821e21da8b5"),
    MacOS(:x86_64) => ("$bin_prefix/libpg_query.v0.0.4.x86_64-apple-darwin14.tar.gz", "eab41ef98f7c4bcd71a8e4c742f5d1d783e3221cbe078ecdbd38d8fe1e8a8524"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libpg_query.v0.0.4.x86_64-linux-gnu.tar.gz", "5392bc511b44943f6a1a38e3895f30b9fc5e15e89a345fe5ea20788b2807c8e8"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libpg_query.v0.0.4.x86_64-linux-musl.tar.gz", "17b30544f600df6a2ee8f67d2fdcefbec62af84384311b0696419f0a87069e15"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
