using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpg_query"], :libpg_query),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/RelationalAI-oss/libpg_query_binary_builder/releases/download/0.0.2"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libpg_query.v0.0.2.i686-linux-gnu.tar.gz", "b59fa7b2436c46e3fbadde7ed835c646ba3d1094ea1f6a06d42d6fd9bd351f8b"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libpg_query.v0.0.2.i686-linux-musl.tar.gz", "1567e0ded2d9b219903cfc835d4d4ec2a0a95740acca11d66cc1701c376a9daa"),
    MacOS(:x86_64) => ("$bin_prefix/libpg_query.v0.0.2.x86_64-apple-darwin14.tar.gz", "f38479166170fa5c3ab9a46becdc62f3ddbee676f25bea6ee073813148fbd64f"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libpg_query.v0.0.2.x86_64-linux-gnu.tar.gz", "7b036873a82e02489e5fde5f4c5c9d8707e0f9c71356d1e96f648e99c4283c88"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libpg_query.v0.0.2.x86_64-linux-musl.tar.gz", "b91ea6dc231320b9804c04d7e70ff2de6ab77e8fe546e623fa7cea94291379e5"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
