using BinaryProvider # requires BinaryProvider 0.3.0 or later

# Parse some basic command-line arguments
const verbose = "--verbose" in ARGS
const prefix = Prefix(get([a for a in ARGS if a != "--verbose"], 1, joinpath(@__DIR__, "usr")))
products = [
    LibraryProduct(prefix, ["libpg_query"], :libpg_query),
]

# Download binaries from hosted location
bin_prefix = "https://github.com/RelationalAI-oss/libpg_query_binary_builder/releases/download/0.0.6"

# Listing of files generated by BinaryBuilder:
download_info = Dict(
    Linux(:i686, libc=:glibc) => ("$bin_prefix/libpg_query.v0.0.6.i686-linux-gnu.tar.gz", "32b4c7006ff4a09384a2c3835bf99722dbc8fb14f4cb4e6f36d8bf303219ef0c"),
    Linux(:i686, libc=:musl) => ("$bin_prefix/libpg_query.v0.0.6.i686-linux-musl.tar.gz", "8636a756d04747dd0317070235bea4e86f4d16bf3f3ac513c71b21b2616751d9"),
    MacOS(:x86_64) => ("$bin_prefix/libpg_query.v0.0.6.x86_64-apple-darwin14.tar.gz", "a84b0d2946f17a9db2f0ee7467ce72947ee6e15203ed0d6256d56618d2f01adf"),
    Linux(:x86_64, libc=:glibc) => ("$bin_prefix/libpg_query.v0.0.6.x86_64-linux-gnu.tar.gz", "541136ff89f1b249dba81b99e1cb5aeb308c9ff2a0753c3f97a37f88ea78c53e"),
    Linux(:x86_64, libc=:musl) => ("$bin_prefix/libpg_query.v0.0.6.x86_64-linux-musl.tar.gz", "182ec0c93abf95183ca16cecc3fe61c576046922c43c2021179aabf519fd18fe"),
)

# Install unsatisfied or updated dependencies:
unsatisfied = any(!satisfied(p; verbose=verbose) for p in products)
dl_info = choose_download(download_info, platform_key_abi())
if dl_info === nothing && unsatisfied
    # If we don't have a compatible .tar.gz to download, complain.
    # Alternatively, you could attempt to install from a separate provider,
    # build from source or something even more ambitious here.
    error("Your platform (\"$(Sys.MACHINE)\", parsed as \"$(triplet(platform_key_abi()))\") is not supported by this package!")
end

# If we have a download, and we are unsatisfied (or the version we're
# trying to install is not itself installed) then load it up!
if unsatisfied || !isinstalled(dl_info...; prefix=prefix)
    # Download and install binaries
    install(dl_info...; prefix=prefix, force=true, verbose=verbose)
end

# Write out a deps.jl file that will contain mappings for our products
write_deps_file(joinpath(@__DIR__, "deps.jl"), products, verbose=verbose)
